openapi: 3.0.3

info:
    title: Library API
    version: 1.2.0
    description: STD22056 | STD22057

servers:
-   url: https://library.com

paths:
    /books:
        get:
            tags:
                - Books
            summary: Return all books
            description: The returned books are ordered by updated datetime.
            operationId: getBooks
            parameters:
                - $ref: '#/components/parameters/queryPagination'
                - in: query
                  name: bookName
                  description: Filter return books by given name
                  required: false
                  schema:
                        type: string
                - in: query
                  name: releaseDateMin
                  description: |
                    If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
                    `releaseDateMin` can not be after `releaseDateMax`.
                  schema:
                    type: string
                    format: date
                  required: false
                - in: query
                  name: releaseDateMax
                  description: |
                    If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
                    `releaseDateMax` can not be after `releaseDateMin`.
                  schema:
                    type: string
                    format: date
                  required: false
                - in: query
                  name: page
                  schema:
                    type: integer
                  required: false
                - in: query
                  name: page
                  description: The number of page to return
                  schema:
                      type: integer
                  required: false
                - in: query
                  name: per_page
                  description: The number of elements per page
                  schema:
                      type: integer
                  required: false

            responses:
                '200':
                    description: The books have been successfully returned
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Book'
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'
        put:
            tags:
                - Books
            summary: Create or update a list of books
            operationId: crupdateBooks
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                            $ref: '#/components/schemas/Book'
            responses:
                '200':
                    description: The list of created or updated books
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Book'
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'
    /authors:
        get:
            summary: Get all authors
            operationId: getAuthors
            tags:
                - Authors
            parameters:
                - $ref: '#/components/parameters/queryPagination'
                - name: authorName
                  in: query
                  description: |
                    Filter returned authors by given name. 
                    If not provided, then list is not filtered.
                  schema:
                    type: string
                  required: false

            responses:
                '200':
                    description: The list of filtered authors
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Author'
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'
        put:
            summary: Create or update authors
            operationId: crupdateAuthors
            tags:
            - Authors
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/Author'
            responses:
                '200':
                    description: The list of created or updated authors
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Author'
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'
    /authors/{aId}:
        delete:
            summary: Delete an author
            operationId: deleteAuthor
            tags:
                - Authors
            parameters:
                - $ref: '#/components/parameters/pathPagination'
                - name: aId
                  in: path
                  description: Author identifier to be deleted
                  schema:
                    type: string
                  required: true
            responses:
                '200':
                    description: The author deleted
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Author'
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'
    /books/{bookId}/authors/{authorId}:
        put:
            summary: modify the author of a book by specifying each of his identifiers separately (bookId and authorId) .
            operationId: update author
            parameters:
                - in: path
                  name: bookId
                  required: true
                  schema:
                    type: integer
                - in: path
                  name: authorId
                  required: true
                  schema:
                    type: integer
            responses:
                '200':
                    description: author updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Book'
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'

    /visitor/{id}/borrow:
        get:
            tags:
              - Visitor
            summary: take all the books that have been borrowed by the visitor with the corresponding visitorId
            operationId: getBorrow
            parameters:
              - name: id
                description: the id of the visitor that borrow the book
                in: path
                required: true
                schema:
                    type: number
              - name: borrowDate
                description: the date of the borrow
                in: query
                required: false
                schema:
                    type: string
              - name: borrowBefore
                in: query
                required: false
                schema:
                    type: string
              - name: borrowAfter
                in: query
                required: false
                schema:
                    type: string
            responses:
                '200':
                    description: The list of borrowed books
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Book'
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'

    /books/import:
        post:
            tags:
                - Books
            summary: Import books from Excel or JSON
            operationId: importBooks
            requestBody:
                description: Import books from Excel or JSON
                required: true
                content:
                    application/json:
                        schema:
                            oneOf:
                                - $ref: '#/components/schemas/ImportBookJSON'
                                - $ref: '#/components/schemas/ImportBookExcel'
                    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
                        schema:
                            $ref: '#/components/schemas/ImportBookExcel'
            responses:
                '201':
                    description: Created new book import
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'

    /authors/import:
        post:
            tags:
                - Authors
            summary: Import authors from Excel or JSON
            operationId: importAuthors
            requestBody:
                description: Import authors from Excel or JSON
                required: true
                content:
                    application/json:
                        schema:
                            oneOf:
                                - $ref: '#/components/schemas/ImportAuthorJSON'
                                - $ref: '#/components/schemas/ImportAuthorExcel'
                    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
                        schema:
                            $ref: '#/components/schemas/ImportAuthorExcel'
            responses:
                '201':
                    description: Created new authors import
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'
    /borrow/{visitorId}/{bookId}:
        post:
            tags:
              - Borrow
            summary: Borrow a book
            operationId: borrowBook
            parameters:
                -   name: visitorId
                    in: path
                    required: true
                    schema:
                        type: number
                -   name: bookId
                    in: path
                    required: true
                    schema:
                        type: number
            responses:
                '201':
                    description: New borrow create
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'
    /borrow/{borrowId}:
        put:
            tags:
                - Borrow
            summary: Modify a borrow by updating returnDate
            parameters:
                - name: borrowId
                  in: path
                  required: true
                  schema:
                    type: number

                requestBody:
                    required: true
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/borrow'
            responses:
                '200':
                    description: Borrow updated
                '400':
                    $ref: '#/components/responses/400'
                '403':
                    $ref: '#/components/responses/403'
                '500':
                    $ref: '#/components/responses/500'

components:
    parameters:
      queryPagination:
          name: pageSize
          in: query
          description: The page number to retrieve
          required: false
          schema:
              type: integer
              default: 50
      pathPagination:
          name: page
          in: path
          description: The page number to retrieve
          required: true
          schema:
              type: integer
              default: 1

    schemas:
        borrow:
            type: object
            properties:
                borrowId:
                    type: number
                visitorId:
                    type: number
                bookId:
                    type: number
                borrowDate:
                    type: string
                    format: date
                returnDate:
                    type: string
                    format: date

        visitor:
            type: object
            properties:
                id:
                  type: number
                name:
                    type: string
                reference:
                    type: string
        Book:
            type: object
            properties:
                id:
                    type: string
                bookName:
                    type: string
        author:
            $ref: '#/components/schemas/Author'
        pageNumbers:
            type: integer
        topic:
            type: string
            enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
            type: string
            format: date
        Author:
            type: object
            properties:
                id:
                    type: string
                authorName:
                    type: string
                sex:
                    $ref: '#/components/schemas/Sex'
        Sex:
            type: string
            enum:
            - M
            - F

        CrupdateBook:
            allOf:
            - $ref: '#/components/schemas/Book'
            - type: string
            properties:
                author:
                    type: object
        UpdateBookAuthor:
            type: object
            properties:
                bookId:
                    type: integer
                authorId:
                    type: integer
        Exception:
            type: object
            properties:
                type:
                    type: string
                message:
                    type: string
        BadRequestException:
            allOf:
              - $ref: '#/components/schemas/Exception'
            example:
                type: BadRequestException
                message: Bad request
        NotAuthorizedException:
            allOf:
                - $ref: '#/components/schemas/Exception'
            example:
                type: NotAuthorizedException
                message: Not authorized
        InternalServerException:
            allOf:
              - $ref: '#/components/schemas/Exception'
                message: Internal server error
            example:
                type: InternalServerException
                message: Internal server error
        ImportBookJSON:
            type: object
            properties:
                books:
                    type: array
                    items:
                        $ref: '#/components/schemas/BookJSON'
            required:
                - books

        ImportBookExcel:
            type: object
            properties:
                excelFile:
                    type: string
                    format: binary
            required:
                - excelFile

        ImportAuthorJSON:
            type: object
            properties:
                authors:
                    type: array
                    items:
                        $ref: '#/components/schemas/AuthorJSON'
            required:
                - authors

        ImportAuthorExcel:
            type: object
            properties:
                excelFile:
                    type: string
                    format: binary
            required:
                - excelFile

        BookJSON:
            type: object
            properties:
                bookName:
                    type: string
                author:
                    $ref: '#/components/schemas/AuthorJSON'
                pageNumbers:
                    type: integer
                topic:
                    type: string
                    enum:
                        - ROMANCE
                        - COMEDY
                        - OTHER
                releaseDate:
                    type: string
                    format: date

        AuthorJSON:
            type: object
            properties:
                authorName:
                    type: string
                sex:
                    $ref: '#/components/schemas/Sex'

    responses:
      '400':
         description: Bad request
         content:
           application/json:
              schema:
                 $ref: '#/components/schemas/BadRequestException'
      '403':
         description: Forbidden
         content:
           application/json:
              schema:
                 $ref: '#/components/schemas/NotAuthorizedException'
      '500':
        description: Internal server error
        content:
            application/json:
                schema:
                    $ref: '#/components/schemas/InternalServerException'